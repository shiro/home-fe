@import "~style/variables/colorVariables";
@import "~style/variables/fontVariables";
@import "~style/variables/breakpointVariables";

@function color($color-name, $color-variant:null) {
  @if ($color-variant != null) {
    @return map-get(map-get($colors, $color-name), $color-variant);
  } @else {
    @return map-get($colors, $color-name);
  }
}

@mixin img2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

// TYPOGRAPHY

@mixin font-size($size: 12) {
  font-size: $size + px; //fallback for old browsers
  font-size: ($size / 16) + rem;
}

@mixin rem-size($size) {
  font-size: $size + px; //fallback for old browsers
  font-size: ($size / 100) + rem;
}

@mixin line-height($lh: 20) {
  line-height: $lh + px; //fallback for old browsers
  line-height: ($lh / 16) + rem;
}

@mixin rhythm($sizeValue: 12, $heightValue: 20) {
  @include font-size($sizeValue);
  @include line-height($heightValue);
}

@mixin font-family($font-name) {
  font-family: map-get($fonts, $font-name);
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@function respond($how, $breakpoint, $breakpoint2:0) {
  @if ($how == above or $how == below) {
    @if map-has-key($breakpoints, $breakpoint) {
      $breakpoint-value: map-get($breakpoints, $breakpoint);
      $breakpoint-bound: if($how == above, min, max);

      @return '#{$breakpoint-bound}-width: #{$breakpoint-value}';
    } @else {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  } @else if ($how == between) {
    @if map-has-key($breakpoints, $breakpoint) and map-has-key($breakpoints, $breakpoint2) {
      $lower-breakpoint: map-get($breakpoints, $breakpoint);
      $upper-breakpoint: map-get($breakpoints, $breakpoint2);

      @return 'min-width: #{$lower-breakpoint}) and (max-width: #{$upper-breakpoint}';
    } @else {
      @if (map-has-key($breakpoints, $breakpoint) == false) {
        @warn 'Your kower breakpoint was invalid: #{$breakpoint}.';
      }
      @if (map-has-key($breakpoints, $breakpoint2) == false) {
        @warn 'Your upper breakpoint was invalid: #{$breakpoint2}.';
      }
    }
  }
}
